[{"content":"书上学过的程序典型编译流程：\n预处理 ( Preprocessing ) 编译 ( Compilation ) 汇编 ( Assemble ) 链接 ( Linking ) 这也是 Unix 操作系统上 GCC 编译器编译 C 代码的编译流程。\nLLVM LLVM 则是一个 modulized 的编译器基础设施，提供了编译器开发所需的各种工具和库。\nClang clang++ 是 LLVM 项目中的 C++ 编译器前端。 它是基于 LLVM 架构的 C++ 编译器，提供了对 C++ 语言的支持，并且可以生成目标代码。 clang++ 是 LLVM 项目中的一个具体实现，它使用 LLVM 提供的库来进行 C++ 代码的编译和优化。\n以 Clang 举例，介绍一个 C 程序的编译流程。 使用如下命令可以输出 clang 的编译阶段。\nclang -v \u0026amp;\u0026amp; \\ clang -ccc-print-phases -o test test.c 输出结果\nHomebrew clang version 16.0.6 Target: arm64-apple-darwin23.1.0 Thread model: posix InstalledDir: /opt/homebrew/opt/llvm@16/bin +- 0: input, \u0026#34;test.c\u0026#34;, c +- 1: preprocessor, {0}, cpp-output +- 2: compiler, {1}, ir +- 3: backend, {2}, assembler +- 4: assembler, {3}, object +- 5: linker, {4}, image 6: bind-arch, \u0026#34;arm64\u0026#34;, {5}, image 如下表所示\ninput processor compiler backend assembler linker \u0026amp; bind-arch c cpp-output ir assembler object image .c .i .bc .s .o excutable 1. 预处理 .c 文件编译成 .i 文件，完成宏替换。\nclang -E -c test.c -o test.i 2. 编译生成 IR (LLVM assembly language) 将源代码 .i 编译成 .bc LLVM IR 文件。 中间经过了一系列处理，详细介绍见编译生成 IR\n# bitcode encoding binary clang -emit-llvm test.i -c -o test.bc # llvm ir clang -emit-llvm test.i -S -o test.ll # use llvm-as to translates ir to LLVM bitcode llvm-as test.ll # use llvm-dis to convert LLVM bitcode to ir llvm-dis test.bc 3. 汇编 llc test.bc -o test.s 4. Assembler # gnu as as test.s -o test.o 5. 生成对应平台的可执行文件 # gnu linker ld test.o -o test # llvm linker llvm-lld ld.lld -arch arm64 -platform_version macos 14.0.0 14.0.0 -o test test.o # or use clang clang -fuse-ld=lld -o test test.o 6. bind-arch bind-arch 用来处理目标产物所需的平台信息。可以通过如下命令查看绑定后的内容。\nfile test 可能的输出\ntest: Mach-O 64-bit executable arm64 任意中间产物输出命令 当然也可以通过 clang 内置的选项在编译的任意过程终止，并输出编译产物。\n-emit-ast Emit Clang AST files for source inputs -emit-llvm Use the LLVM representation for assembler and object files -S Only run preprocess and compilation steps, generate assembly 流行的编译器 Rustc Overview of the compiler source code representation\n编译过程如下：\nLex and parse AST lowering - HIR HIR lowernig - THIR MIR lowering - MIR Code generation - LLVM IR Swiftc 与 clang 一样，swiftc 是LLVM编译架构的一个前端。 Swift 的编译过程中的中间结果\n-dump-ast 解析和类型检查源文件 \u0026amp; 转换成 AST -dump-parse 解析源文件 \u0026amp; 转换成 AST -emit-assembly 生成汇编文件 -emit-bc 生成 LLVM Bitcode 文件 -emit-executable 生成已链接的可执行文件 -emit-imported-modules 生成已导入的库 -emit-ir 生成 LLVM IR 文件 -emit-silgen 生成 raw SIL 文件（第一个阶段） -emit-sil 生成 canonical SIL 文件（第2个阶段） -print-ast 解析和类型检查源文件 \u0026amp; 转换成更简约的格式更好的 AST -typecheck 解析和类型检查源文件 编译过程如下：\nlex and parse - AST Sema - AST with annotation SILGen - raw SIL Optimize Pass - SIL IRGen - LLVM IR Binary Kotlin/Native Kotlin 是一种由 JetBrains 开发的现代编程语言，Kotlin/Native 是使用 LLVM 工具链的 Kotlin 编译器、运行时实现和本机代码生成工具的 LLVM 后端。 Kotlin/Native 的主要设计目的是允许在不需要或不可能使用虚拟机的平台（例如 iOS 或嵌入式目标）上进行编译，或者在开发人员愿意生成合理大小的独立程序而无需交付虚拟机的平台上进行编译。额外的执行运行时间。\nkotlinc-native 编译过程如下：\nlex and parse - AST AST lowering - HIR IRGen - LLVM IR Target CUDA NVCC NVVM IR\nNVVM IR 是 LLVM IR 的一个子集，增加了一些规则、限制和约定以及一些内置函数。\n","permalink":"http://localhost:1313/posts/compiler/llvm-and-popular-compilers/","summary":"书上学过的程序典型编译流程：\n预处理 ( Preprocessing ) 编译 ( Compilation ) 汇编 ( Assemble ) 链接 ( Linking ) 这也是 Unix 操作系统上 GCC 编译器编译 C 代码的编译流程。\nLLVM LLVM 则是一个 modulized 的编译器基础设施，提供了编译器开发所需的各种工具和库。\nClang clang++ 是 LLVM 项目中的 C++ 编译器前端。 它是基于 LLVM 架构的 C++ 编译器，提供了对 C++ 语言的支持，并且可以生成目标代码。 clang++ 是 LLVM 项目中的一个具体实现，它使用 LLVM 提供的库来进行 C++ 代码的编译和优化。\n以 Clang 举例，介绍一个 C 程序的编译流程。 使用如下命令可以输出 clang 的编译阶段。\nclang -v \u0026amp;\u0026amp; \\ clang -ccc-print-phases -o test test.c 输出结果\nHomebrew clang version 16.","title":"llvm and popular compilers"},{"content":"hello world\n#include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;hi\u0026#34; \u0026lt;\u0026lt; std::endl; } ","permalink":"http://localhost:1313/posts/cpp/byexample/hi/","summary":"hello world\n#include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;hi\u0026#34; \u0026lt;\u0026lt; std::endl; } ","title":"Hi"},{"content":"This is a showoff direction for the cool cpper.\n","permalink":"http://localhost:1313/posts/cpp/showoff/","summary":"This is a showoff direction for the cool cpper.","title":"Showoff"},{"content":"cpp 目前被应用在以下一些领域中。\n游戏开发：cpp 是游戏开发中最常用的编程语言之一。它能够优化资源、提供多人联机功能，并且适用于开发3D游戏。著名的 UE 引擎。\n图形用户界面（GUI）应用程序：许多常用的 GUI 应用程序，如 Adobe 系统的 Illustrator 和 Photoshop，以及微软的 Win Amp 媒体播放器都是使用 cpp 开发的。\n数据库管理系统：流行的数据库管理工具，如 MySQL、Oracle、Postgres 和 MongoDB，都是使用 cpp 开发的。cpp 的文件处理、高速性、可靠性、函数、类和对象等特性使其非常适合数据管理。有一个数据库引擎排名的网站可以参考：https://db-engines.com/en/ranking。\n操作系统：大多数操作系统，如 Microsoft Windows、Apple Mac OS X 和移动操作系统 iOS，都是使用 cpp 开发的。作为操作系统同时期发展起来的 cpp，是操作系统的主力语言。\n浏览器：许多常用的网页浏览器，如 Google Chrome、Mozilla Firefox 和 Internet Explorer，都是使用 cpp 编写的。cpp 能够使浏览器以高速和最小延迟运行，确保网页内容快速加载。\n分布式存储和文件系统：cpp 是实现云存储系统的首选语言，因为它能够与硬件紧密配合，并提供多线程支持，以构建并发应用和负载容忍系统。很多分布式文件系统都是使用 cpp 开发的。\n编译器：许多高级编程语言的编译器都是使用 C 或 cpp 编写的。cpp 作为低级语言，能够直接操作硬件资源，因此非常适合编写编译器。比如说 LLVM，很多编程语言都受益于 LLVM。\n嵌入式系统：各种嵌入式系统，如智能手表和医疗设备系统，都使用 cpp 进行编程，因为它更接近硬件级别，并且可以提供许多低级功能调用。\n企业软件：cpp 用于开发许多企业软件，以及高级应用程序，如飞行模拟和雷达处理。\n库：许多高级数学计算库使用 cpp 作为核心编程语言。cpp 比大多数其他编程语言更快，并且支持并发，因此在需要速度和并发性的应用程序中，cpp 是最受欢迎的开发语言之一。\n","permalink":"http://localhost:1313/posts/cpp/application/","summary":"cpp 目前被应用在以下一些领域中。\n游戏开发：cpp 是游戏开发中最常用的编程语言之一。它能够优化资源、提供多人联机功能，并且适用于开发3D游戏。著名的 UE 引擎。\n图形用户界面（GUI）应用程序：许多常用的 GUI 应用程序，如 Adobe 系统的 Illustrator 和 Photoshop，以及微软的 Win Amp 媒体播放器都是使用 cpp 开发的。\n数据库管理系统：流行的数据库管理工具，如 MySQL、Oracle、Postgres 和 MongoDB，都是使用 cpp 开发的。cpp 的文件处理、高速性、可靠性、函数、类和对象等特性使其非常适合数据管理。有一个数据库引擎排名的网站可以参考：https://db-engines.com/en/ranking。\n操作系统：大多数操作系统，如 Microsoft Windows、Apple Mac OS X 和移动操作系统 iOS，都是使用 cpp 开发的。作为操作系统同时期发展起来的 cpp，是操作系统的主力语言。\n浏览器：许多常用的网页浏览器，如 Google Chrome、Mozilla Firefox 和 Internet Explorer，都是使用 cpp 编写的。cpp 能够使浏览器以高速和最小延迟运行，确保网页内容快速加载。\n分布式存储和文件系统：cpp 是实现云存储系统的首选语言，因为它能够与硬件紧密配合，并提供多线程支持，以构建并发应用和负载容忍系统。很多分布式文件系统都是使用 cpp 开发的。\n编译器：许多高级编程语言的编译器都是使用 C 或 cpp 编写的。cpp 作为低级语言，能够直接操作硬件资源，因此非常适合编写编译器。比如说 LLVM，很多编程语言都受益于 LLVM。\n嵌入式系统：各种嵌入式系统，如智能手表和医疗设备系统，都使用 cpp 进行编程，因为它更接近硬件级别，并且可以提供许多低级功能调用。\n企业软件：cpp 用于开发许多企业软件，以及高级应用程序，如飞行模拟和雷达处理。\n库：许多高级数学计算库使用 cpp 作为核心编程语言。cpp 比大多数其他编程语言更快，并且支持并发，因此在需要速度和并发性的应用程序中，cpp 是最受欢迎的开发语言之一。","title":"cpp: applications"},{"content":"Try these scripts in vim editor.\nIn normal mode and type\n:source hi.vim you can see the result. Or you can use:\nvim -eS hi.vim Reference Learn Vimscript the Hard Way\n","permalink":"http://localhost:1313/posts/vimbyexample/readme/","summary":"Try these scripts in vim editor.\nIn normal mode and type\n:source hi.vim you can see the result. Or you can use:\nvim -eS hi.vim Reference Learn Vimscript the Hard Way","title":""}]